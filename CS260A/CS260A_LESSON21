In this lesson, we will be discussing the systemctl command, which is the 
central management tool for controlling the init system.  

Starting and Stopping Services
------------------------------
To start a systemd service :

sudo systemctl start application.service
Since .service is the default extension, we do not need to use it in our commands.
As we mentioned above, systemd knows to look for *.service files for service 
Therefore the above command could be re-written as:

sudo systemctl start application

To stop a currently running service:

sudo systemctl stop application.service

To restart a running service, you can use the restart command:

sudo systemctl restart application.service

If the application in question is able to reload its configuration files 
(without restarting), you can issue the reload command to initiate that 
process:

sudo systemctl reload application.service

If you are unsure whether the service has the functionality to reload its 
configuration, you can issue the reload-or-restart command. This will reload 
the configuration in-place if available. Otherwise, it will restart the 
service so the new configuration is picked up:

sudo systemctl reload-or-restart application.service

To tell systemd to start services automatically at boot, you must enable them.

sudo systemctl enable application.service

This will create a symbolic link from the system’s copy of the service file 
(usually in /lib/systemd/system or /etc/systemd/system) into the location on 
disk where systemd looks for autostart files (usually 
/etc/systemd/system/some_target.target.wants. 

To disable the service from starting automatically, you can type:

sudo systemctl disable application.service

This will remove the symbolic link that indicated that the service should be 
started automatically.

Keep in mind that enabling a service does not start it in the current session. 
If you wish to start the service and also enable it at boot, you will have to 
issue both the start and enable commands.

To check the status of a service on your system, you can use the status 
command:

systemctl status application.service

There are also methods for checking for specific states. For instance, to 
check to see if a unit is currently active (running), you can use the 
is-active command:

systemctl is-active application.service


To see if the unit is enabled, you can use the is-enabled command:

systemctl is-enabled application.service

A third check is whether the unit is in a failed state. This indicates that 
there was a problem starting the unit in question:

systemctl is-failed application.service

To see a list of all of the active units that systemd knows about, we can use 
the list-units command:

systemctl list-units


We can tell systemctl to output different information by adding additional 
flags. For instance, to see all of the units that systemd has loaded (or 
attempted to load), regardless of whether they are currently active, you can 
use the --all flag, like this:

systemctl list-units --all

This will show any unit that systemd loaded or attempted to load, regardless 
of its current state on the system. Some units become inactive after running, 
and some units that systemd attempted to load may have not been found on disk.

You can use other flags to filter these results. For example, we can use the 
--state= flag to indicate the LOAD, ACTIVE, or SUB states that we wish to see. 
You will have to keep the --all flag so that systemctl allows non-active units 
to be displayed:

systemctl list-units --all --state=inactive

Another common filter is the --type= filter. We can tell systemctl to only 
display units of the type we are interested in. For example, to see only 
active service units, we can use:

systemctl list-units --type=service
Listing All Unit Files

The list-units command only displays units that systemd has attempted to parse 
and load into memory. Since systemd will only read units that it thinks it 
needs, this will not necessarily include all of the available units on the 
system. To see every available unit file within the systemd paths, including 
those that systemd has not attempted to load, you can use the list-unit-files 
command instead:

systemctl list-unit-files
Units are representations of resources that systemd knows about. Since systemd 
has not necessarily read all of the unit definitions in this view, it only 
presents information about the files themselves. 

Displaying a Unit File
To display the unit file that systemd has loaded into its system, you can use 
the cat command (this was added in systemd version 209). For instance, to see 
the unit file of the atd scheduling daemon, we could type:

systemctl cat atd.service

The output is the unit file as known to the currently running systemd process. 
This can be important if you have modified unit files recently or if you are 
overriding certain options in a unit file fragment (we will cover this later).

To see a unit’s dependency tree, you can use the list-dependencies command:

systemctl list-dependencies sshd.service

The recursive dependencies are only displayed for .target units, which 
indicate system states. To recursively list all dependencies, include the 
--all flag.

To show reverse dependencies (units that depend on the specified unit), you 
can add the --reverse flag to the command. Other flags that are useful are the 
--before and --after flags, which can be used to show units that depend on the 
specified unit starting before and after themselves, respectively.

To see the low-level properties of a unit, you can use the show command. This 
will display a list of properties that are set for the specified unit using a 
key=value format:

systemctl show sshd.service

If you want to display a single property, you can pass the -p flag with the 
property name. For instance, to see the conflicts that the sshd.service unit 
has, you can type:

systemctl show sshd.service -p Conflicts

Usinf mask:

sudo systemctl mask any.service
This will prevent the "any" service from being started, automatically or 
manually, for as long as it is masked.

If you check the list-unit-files, you will see the service is now listed as 
masked:

systemctl list-unit-files

If you attempt to start the service, you will see a message like this:

sudo systemctl start any.service

Output
Failed to start any.service: Unit any.service is masked.

To unmask a unit, making it available for use again, use the unmask command:

sudo systemctl unmask any.service

This will return the unit to its previous state, allowing it to be started or 
enabled.

Editing Unit Files

systemctl provides built-in mechanisms for editing and modifying 
unit files if you need to make adjustments.  

The edit command, by default, will open a unit file snippet for the unit in 
question:

sudo systemctl edit nginx.service

This will be a blank file that can be used to override or add directives to 
the unit definition. A directory will be created within the 
/etc/systemd/system directory which contains the name of the unit with .d 
appended. For instance, for the any.service, a directory called 
any.service.d will be created.

Within this directory, a snippet will be created called override.conf. When 
the unit is loaded, systemd will, in memory, merge the override snippet with 
the full unit file. The snippet’s directives will take precedence over those 
found in the original unit file.

If you wish to edit the full unit file instead of creating a snippet, you can 
pass the --full flag:

sudo systemctl edit --full any.service
This will load the current unit file into the editor, where it can be 
modified. When the editor exits, the changed file will be written to 
/etc/systemd/system, which will take precedence over the system’s unit 
definition (usually found somewhere in /lib/systemd/system).

To remove any additions you have made, either delete the unit’s .d 
configuration directory or the modified service file from /etc/systemd/system. 
For instance, to remove a snippet, we could type:

sudo rm -r /etc/systemd/system/any.service.d
To remove a full modified unit file, we would type:

sudo rm /etc/systemd/system/any.service

After deleting the file or directory, you should reload the systemd process so 
that it no longer attempts to reference these files and reverts back to using 
the system copies. You can do this by typing:

sudo systemctl daemon-reload

Adjusting the System State (Runlevel) with Targets
Targets are special unit files that describe a system state or synchronization 
point. Like other units, the files that define targets can be identified by 
their suffix, which in this case is .target. Targets do not do much 
themselves, but are instead used to group other units together.

This can be used in order to bring the system to certain states, much like 
other init systems use runlevels. They are used as a reference for when 
certain functions are available, allowing you to specify the desired state 
instead of the individual units needed to produce that state.

For instance, there is a swap.target that is used to indicate that swap is 
ready for use. Units that are part of this process can sync with this target 
by indicating in their configuration that they are WantedBy= or RequiredBy= 
the swap.target. Units that require swap to be available can specify this 
condition using the Wants=, Requires=, and After= specifications to indicate 
the nature of their relationship.

Getting and Setting the Default Target
The systemd process has a default target that it uses when booting the system. 
Satisfying the cascade of dependencies from that single target will bring the 
system into the desired state. To find the default target for your system, 
type:

systemctl get-default

It is possible to start all of the units associated with a target and stop all 
units that are not part of the dependency tree. The command that we need to do 
this is called, appropriately, isolate. This is similar to changing the 
runlevel in other init systems.

For instance, if you are operating in a graphical environment with 
graphical.target active, you can shut down the graphical system and put the 
system into a multi-user command line state by isolating the 
multi-user.target. Since graphical.target depends on multi-user.target but not 
the other way around, all of the graphical units will be stopped.

You may wish to take a look at the dependencies of the target you are 
isolating before performing this procedure to ensure that you are not stopping 
vital services:

systemctl list-dependencies multi-user.target
When you are satisfied with the units that will be kept alive, you can isolate 
the target by typing:

sudo systemctl isolate multi-user.target
Using Shortcuts for Important Events
There are targets defined for important events like powering off or rebooting. 
However, systemctl also has some shortcuts that add a bit of additional 
functionality.

For instance, to put the system into rescue (single-user) mode, you can use 
the rescue command instead of isolate rescue.target:

sudo systemctl rescue
This will provide the additional functionality of alerting all logged in users 
about the event.

To halt the system, you can use the halt command:

sudo systemctl halt
To initiate a full shutdown, you can use the poweroff command:

sudo systemctl poweroff
A restart can be started with the reboot command:

sudo systemctl reboot
These all alert logged in users that the event is occurring, something that 
only running or isolating the target will not do. Note that most machines will 
link the shorter, more conventional commands for these operations so that they 
work properly with systemd.

For example, to reboot the system, you can usually type:

sudo reboot

