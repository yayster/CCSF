System startup, services and daemon managers
--------------------------------------------

There are 2 different software suite systems for managing services and daemons,
and system's startup:
  a) Sysv init
  b) Systemd

Systemd was invented in RedHat and introduced in 2011, and was used in Fedora for
a first time.
These days, most of the Linux variants, and some Unix systems are using systemd.
Some familiarity with Sysv init, would be helpful to understand the systemd
better.

1) SysV init
   Init is the first program to run after your system is booted, and continues to
   run as process number 1 until your system halts. Init's job is to start other
   programs that are essential to the operation of your system. All other processes 
   are descended from init
   The pid of init is 0, and it is a parent of all of the processes in sysv.

   Init gets information from the /etc/inittab file to decide how to star, kill,
   and manage the other processes.
   The following is an snippet from the /etc/inittab:

   id:2:initdefault:

   si::sysinit:/etc/init.d/rcS

   l2:2:wait:/etc/init.d/rc 2
Which causes the files /etc/init.d/rcS to run initialization scripts (in /etc/rcS.d/*),
then scripts for requested runlevel (in /etc/rcS.[0-9]/*)
The first line sets the current runlevel of the system. It is set to "2".

Runlevel
--------
A run level is a state of init and the whole system that defines what system services
are operating. Run levels are identified by numbers. Some system administrators use
run levels to define which subsystems are working, e.g., whether X is running,
whether the network is operational, and so on.

There are 7 runlevels:

0- System halt i.e the system can be safely powered off with no activity.

1- Single user mode.

2- Multiple user mode with no NFS(network file system).

3- Multiple user mode (no graphics).

4- User-definable.

5- Multiple user mode under GUI (graphical user interface) and this is the standard
   runlevel for most of the LINUX based systems.

6-  Reboot which is used to restart the system.

Note: hills is running in the runlevel 3. This is one of the reasons that we can not
      do graphics on hills.


To see the current runlevel, we can use:

   who  -r
   OR
   runlevel

To switch the system to any runlevel we do:
   telinit <runlevel> .
   for example,  telinit 1
   would put the system into the single user mode.

obviously the start scripts for each run level will be different performing different
tasks. These start scripts corresponding to each run level can be found in special 
files present under rc sub directories.
At /etc/rc.d directory there will be either a set of files named rc.0, rc.1, rc.2,
rc.3, rc.4, rc.5 and rc.6, or a set of directories named rc0.d, rc1.d, rc2.d, rc3.d,
rc4.d, rc5.d and rc6.d.
For example, run level 1 will have its start script either in file /etc/rc.d/rc.1
or any files in the directory /etc/rc.d/rc1.d.

There are many sites on Internet about runlevel. The one that I suggest is:

https://www.liquidweb.com/kb/linux-runlevels-explained/

systemd
-------

Dear CS260A students.
The following information is extracted from an excellent site of "go Linux Cloud".
This site is providing very valuable information about "Linux".
In this lesson, you will learn about "systemd".


Understanding Targets, Services and Units
-----------------------------------------
Before we understand how systemd works, we need to know some basic terminologies

Firstly, a target is a group of services, similar to, but more general than, a System V
runlevel. There is a default target which is the group of services that are started at
boot time.

Secondly, a service is a daemon that can be started and stopped, very much like a
SystemV service.

Finally, a unit is a configuration file that describes a target, a service, and several
other things. Units are text files that contain properties and values.
 

Units
The basic item of configuration is the unit file. Unit files are found in three different places:

/etc/systemd/system: Local configuration
/run/systemd/system: Runtime configuration
/lib/systemd/system: Distribution-wide configuration
/usr/lib/systemd/system/: Contains default systemd unit configurations as per contained
in the rpm.

When looking for a unit, systemd searches the directories in that order, stopping as
soon as it finds a match, allowing you to override the behavior of a distribution-wide
unit by placing a unit of the same name in /etc/systemd/system. You can disable a unit
completely by creating a local file that is empty or linked to /dev/null.

Note:
/etc/systemd/system contains any custom and/or more permanent configurations which the
user requires to set on a systemd unit. This is where it is advised to put custom
configuration as it will not be lost upon package updates.

All unit files begin with a section marked [Unit] which contains basic information and
dependencies, for example:

[Unit]
Description=D-Bus System Message Bus
Documentation=man:dbus-daemon(1)
Requires=dbus.socket

Unit dependencies are expressed though Requires, Wants, and Conflicts:

Requires: A list of units that this unit depends on, which is started when this unit is
started.

Wants: A weaker form of Requires: the units listed are started but the current unit is
not stopped if any of them fail.

Conflicts: A negative dependency: the units listed are stopped when this one is started
and, conversely, if one of them is started, this one is stopped

Processing the dependencies produces a list of units that should be started
(or stopped). The keywords Before and After determine the order in which they are 
started. The order of stopping is just the reverse of the start order:

Before: This unit should be started before the units listed
After: This unit should be started after the units listed

In the following example, the After directive makes sure that the web server is
started after the network:

[Unit]
Description=Lighttpd Web Server
After=network.target
In the absence of Before or After directives, the units will be started or stopped in
parallel with no particular ordering.
How systemd boots the system?


Services
--------
A service is a daemon that can be started and stopped, equivalent to a System V service. for example, lighttpd.service.

A service unit has a [Service] section that describes how it should be run. Here is the relevant section from lighttpd.service:

[Service]
ExecStart=/usr/sbin/lighttpd -f /etc/lighttpd/lighttpd.conf -D
ExecReload=/bin/kill -HUP $MAINPID

These are the commands to run when starting the service and restarting it. There are
many more configuration points you can add in here, so refer to the man page for
systemd.service.

Targets

A target is another type of unit which groups services (or other types of unit).
It is a type of unit that only has dependencies. Targets have names ending in .target,
for example, multi-user.target. A target is a desired state, which performs the same
role as System V runlevels.

How systemd boots the system?
----------------------------- 

Now we can see how systemd implements the bootstrap. systemd is run by the kernel as
a result of /sbin/init being symbolically linked to /lib/systemd/systemd. It runs
the default target, default.target, which is always a link to a desired target such 
as multi-user.target for a text login or graphical.target for a graphical environment.
For example, if the default target is multi-user.target, you will find this symbolic
link:

/etc/systemd/system/default.target -> /lib/systemd/system/multi-user.target

The default target may be overridden by passing system.unit=<new target> on the kernel
command line. You can use systemctl to find out the default target, as shown here:

# systemctl get-default
multi-user.target

Starting a target such as multi-user.target creates a tree of dependencies that bring
the system into a working state. In a typical system, multi-user.target depends on
basic.target, which depends on sysinit.target, which depends on the services that need
to be started early. You can print a graph using systemctl list-dependencies.

How to create your own systemd service unit file?
-------------------------------------------------

Below is a sample systemd based service unit file. Here we call our custom script

# vim /etc/systemd/system/set_clock.service
[Unit]
Description=Syncing system and hardware clock

[Service]
Type=forking
ExecStart=/usr/bin/boot.clock_fix start
ExecStop=/usr/bin/boot.clock_fix stop
RemainAfterExit=true

[Install]
WantedBy=multi-user.target


The [Unit] section only contains a description so that it shows up correctly when
listed using systemctl and other commands. There are no dependencies; as I said, it
is very simple.

The [Service] section points to the executable, and has a flag to indicate that it
forks. If it were even simpler and ran in the foreground, systemd would do the
daemonizing for us and Type=forking would not be needed.

The [Install] section makes it dependent on multi-user.target so that our server is
started when the system goes into multi-user mode.

Start and check the status of the service

# systemctl start set_clock

# systemctl status set_clock.service
 set_clock.service - Syncing system and hardware clock
Loaded: loaded (/etc/systemd/system/set_clock.service; enabled; vendor preset: disabled)
Active: active (exited) since Fri 2018-11-16 12:37:20 IST; 9s ago
Process: 7964 ExecStop=/etc/init.d/boot.clock_fix stop (code=exited, status=0/SUCCESS)
Process: 7979 ExecStart=/etc/init.d/boot.clock_fix start (code=exited, status=0/SUCCESS)
Main PID: 1338 (code=exited, status=0/SUCCESS)

Nov 16 12:37:13 Ban17-inst01-a boot.clock_fix[7979]: Set Sys time according to
Hardware Clock
Nov 16 12:37:20 Ban17-inst01-a systemd[1]: Started Syncing system and hardware clock.
At this point, it will only start and stop on command, as shown. To make it
persistent, you need to add a permanent dependency to a target. That is the purpose
of the [Install] section in the unit, it says that when this service is enabled it
will become dependent on multi-user.target, and so will be started at boot time.

You enable it using systemctl enable, like this:

# systemctl enable set_clock.service

   
